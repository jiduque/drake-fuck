Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> commands
Rule 1     commands -> command
Rule 2     commands -> commands command
Rule 3     command -> INCREMENT
Rule 4     command -> DECREMENT
Rule 5     command -> SHIFT_LEFT
Rule 6     command -> SHIFT_RIGHT
Rule 7     command -> OUTPUT
Rule 8     command -> INPUT
Rule 9     command -> loop
Rule 10    loop -> OPEN_LOOP commands CLOSE_LOOP

Terminals, with rules where they appear

CLOSE_LOOP           : 10
DECREMENT            : 4
INCREMENT            : 3
INPUT                : 8
OPEN_LOOP            : 10
OUTPUT               : 7
SHIFT_LEFT           : 5
SHIFT_RIGHT          : 6
error                : 

Nonterminals, with rules where they appear

command              : 1 2
commands             : 2 10 0
loop                 : 9

Parsing method: LALR

state 0

    (0) S' -> . commands
    (1) commands -> . command
    (2) commands -> . commands command
    (3) command -> . INCREMENT
    (4) command -> . DECREMENT
    (5) command -> . SHIFT_LEFT
    (6) command -> . SHIFT_RIGHT
    (7) command -> . OUTPUT
    (8) command -> . INPUT
    (9) command -> . loop
    (10) loop -> . OPEN_LOOP commands CLOSE_LOOP

    INCREMENT       shift and go to state 3
    DECREMENT       shift and go to state 4
    SHIFT_LEFT      shift and go to state 5
    SHIFT_RIGHT     shift and go to state 6
    OUTPUT          shift and go to state 7
    INPUT           shift and go to state 8
    OPEN_LOOP       shift and go to state 10

    commands                       shift and go to state 1
    command                        shift and go to state 2
    loop                           shift and go to state 9

state 1

    (0) S' -> commands .
    (2) commands -> commands . command
    (3) command -> . INCREMENT
    (4) command -> . DECREMENT
    (5) command -> . SHIFT_LEFT
    (6) command -> . SHIFT_RIGHT
    (7) command -> . OUTPUT
    (8) command -> . INPUT
    (9) command -> . loop
    (10) loop -> . OPEN_LOOP commands CLOSE_LOOP

    INCREMENT       shift and go to state 3
    DECREMENT       shift and go to state 4
    SHIFT_LEFT      shift and go to state 5
    SHIFT_RIGHT     shift and go to state 6
    OUTPUT          shift and go to state 7
    INPUT           shift and go to state 8
    OPEN_LOOP       shift and go to state 10

    command                        shift and go to state 11
    loop                           shift and go to state 9

state 2

    (1) commands -> command .

    INCREMENT       reduce using rule 1 (commands -> command .)
    DECREMENT       reduce using rule 1 (commands -> command .)
    SHIFT_LEFT      reduce using rule 1 (commands -> command .)
    SHIFT_RIGHT     reduce using rule 1 (commands -> command .)
    OUTPUT          reduce using rule 1 (commands -> command .)
    INPUT           reduce using rule 1 (commands -> command .)
    OPEN_LOOP       reduce using rule 1 (commands -> command .)
    $end            reduce using rule 1 (commands -> command .)
    CLOSE_LOOP      reduce using rule 1 (commands -> command .)


state 3

    (3) command -> INCREMENT .

    INCREMENT       reduce using rule 3 (command -> INCREMENT .)
    DECREMENT       reduce using rule 3 (command -> INCREMENT .)
    SHIFT_LEFT      reduce using rule 3 (command -> INCREMENT .)
    SHIFT_RIGHT     reduce using rule 3 (command -> INCREMENT .)
    OUTPUT          reduce using rule 3 (command -> INCREMENT .)
    INPUT           reduce using rule 3 (command -> INCREMENT .)
    OPEN_LOOP       reduce using rule 3 (command -> INCREMENT .)
    $end            reduce using rule 3 (command -> INCREMENT .)
    CLOSE_LOOP      reduce using rule 3 (command -> INCREMENT .)


state 4

    (4) command -> DECREMENT .

    INCREMENT       reduce using rule 4 (command -> DECREMENT .)
    DECREMENT       reduce using rule 4 (command -> DECREMENT .)
    SHIFT_LEFT      reduce using rule 4 (command -> DECREMENT .)
    SHIFT_RIGHT     reduce using rule 4 (command -> DECREMENT .)
    OUTPUT          reduce using rule 4 (command -> DECREMENT .)
    INPUT           reduce using rule 4 (command -> DECREMENT .)
    OPEN_LOOP       reduce using rule 4 (command -> DECREMENT .)
    $end            reduce using rule 4 (command -> DECREMENT .)
    CLOSE_LOOP      reduce using rule 4 (command -> DECREMENT .)


state 5

    (5) command -> SHIFT_LEFT .

    INCREMENT       reduce using rule 5 (command -> SHIFT_LEFT .)
    DECREMENT       reduce using rule 5 (command -> SHIFT_LEFT .)
    SHIFT_LEFT      reduce using rule 5 (command -> SHIFT_LEFT .)
    SHIFT_RIGHT     reduce using rule 5 (command -> SHIFT_LEFT .)
    OUTPUT          reduce using rule 5 (command -> SHIFT_LEFT .)
    INPUT           reduce using rule 5 (command -> SHIFT_LEFT .)
    OPEN_LOOP       reduce using rule 5 (command -> SHIFT_LEFT .)
    $end            reduce using rule 5 (command -> SHIFT_LEFT .)
    CLOSE_LOOP      reduce using rule 5 (command -> SHIFT_LEFT .)


state 6

    (6) command -> SHIFT_RIGHT .

    INCREMENT       reduce using rule 6 (command -> SHIFT_RIGHT .)
    DECREMENT       reduce using rule 6 (command -> SHIFT_RIGHT .)
    SHIFT_LEFT      reduce using rule 6 (command -> SHIFT_RIGHT .)
    SHIFT_RIGHT     reduce using rule 6 (command -> SHIFT_RIGHT .)
    OUTPUT          reduce using rule 6 (command -> SHIFT_RIGHT .)
    INPUT           reduce using rule 6 (command -> SHIFT_RIGHT .)
    OPEN_LOOP       reduce using rule 6 (command -> SHIFT_RIGHT .)
    $end            reduce using rule 6 (command -> SHIFT_RIGHT .)
    CLOSE_LOOP      reduce using rule 6 (command -> SHIFT_RIGHT .)


state 7

    (7) command -> OUTPUT .

    INCREMENT       reduce using rule 7 (command -> OUTPUT .)
    DECREMENT       reduce using rule 7 (command -> OUTPUT .)
    SHIFT_LEFT      reduce using rule 7 (command -> OUTPUT .)
    SHIFT_RIGHT     reduce using rule 7 (command -> OUTPUT .)
    OUTPUT          reduce using rule 7 (command -> OUTPUT .)
    INPUT           reduce using rule 7 (command -> OUTPUT .)
    OPEN_LOOP       reduce using rule 7 (command -> OUTPUT .)
    $end            reduce using rule 7 (command -> OUTPUT .)
    CLOSE_LOOP      reduce using rule 7 (command -> OUTPUT .)


state 8

    (8) command -> INPUT .

    INCREMENT       reduce using rule 8 (command -> INPUT .)
    DECREMENT       reduce using rule 8 (command -> INPUT .)
    SHIFT_LEFT      reduce using rule 8 (command -> INPUT .)
    SHIFT_RIGHT     reduce using rule 8 (command -> INPUT .)
    OUTPUT          reduce using rule 8 (command -> INPUT .)
    INPUT           reduce using rule 8 (command -> INPUT .)
    OPEN_LOOP       reduce using rule 8 (command -> INPUT .)
    $end            reduce using rule 8 (command -> INPUT .)
    CLOSE_LOOP      reduce using rule 8 (command -> INPUT .)


state 9

    (9) command -> loop .

    INCREMENT       reduce using rule 9 (command -> loop .)
    DECREMENT       reduce using rule 9 (command -> loop .)
    SHIFT_LEFT      reduce using rule 9 (command -> loop .)
    SHIFT_RIGHT     reduce using rule 9 (command -> loop .)
    OUTPUT          reduce using rule 9 (command -> loop .)
    INPUT           reduce using rule 9 (command -> loop .)
    OPEN_LOOP       reduce using rule 9 (command -> loop .)
    $end            reduce using rule 9 (command -> loop .)
    CLOSE_LOOP      reduce using rule 9 (command -> loop .)


state 10

    (10) loop -> OPEN_LOOP . commands CLOSE_LOOP
    (1) commands -> . command
    (2) commands -> . commands command
    (3) command -> . INCREMENT
    (4) command -> . DECREMENT
    (5) command -> . SHIFT_LEFT
    (6) command -> . SHIFT_RIGHT
    (7) command -> . OUTPUT
    (8) command -> . INPUT
    (9) command -> . loop
    (10) loop -> . OPEN_LOOP commands CLOSE_LOOP

    INCREMENT       shift and go to state 3
    DECREMENT       shift and go to state 4
    SHIFT_LEFT      shift and go to state 5
    SHIFT_RIGHT     shift and go to state 6
    OUTPUT          shift and go to state 7
    INPUT           shift and go to state 8
    OPEN_LOOP       shift and go to state 10

    commands                       shift and go to state 12
    command                        shift and go to state 2
    loop                           shift and go to state 9

state 11

    (2) commands -> commands command .

    INCREMENT       reduce using rule 2 (commands -> commands command .)
    DECREMENT       reduce using rule 2 (commands -> commands command .)
    SHIFT_LEFT      reduce using rule 2 (commands -> commands command .)
    SHIFT_RIGHT     reduce using rule 2 (commands -> commands command .)
    OUTPUT          reduce using rule 2 (commands -> commands command .)
    INPUT           reduce using rule 2 (commands -> commands command .)
    OPEN_LOOP       reduce using rule 2 (commands -> commands command .)
    $end            reduce using rule 2 (commands -> commands command .)
    CLOSE_LOOP      reduce using rule 2 (commands -> commands command .)


state 12

    (10) loop -> OPEN_LOOP commands . CLOSE_LOOP
    (2) commands -> commands . command
    (3) command -> . INCREMENT
    (4) command -> . DECREMENT
    (5) command -> . SHIFT_LEFT
    (6) command -> . SHIFT_RIGHT
    (7) command -> . OUTPUT
    (8) command -> . INPUT
    (9) command -> . loop
    (10) loop -> . OPEN_LOOP commands CLOSE_LOOP

    CLOSE_LOOP      shift and go to state 13
    INCREMENT       shift and go to state 3
    DECREMENT       shift and go to state 4
    SHIFT_LEFT      shift and go to state 5
    SHIFT_RIGHT     shift and go to state 6
    OUTPUT          shift and go to state 7
    INPUT           shift and go to state 8
    OPEN_LOOP       shift and go to state 10

    command                        shift and go to state 11
    loop                           shift and go to state 9

state 13

    (10) loop -> OPEN_LOOP commands CLOSE_LOOP .

    INCREMENT       reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    DECREMENT       reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    SHIFT_LEFT      reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    SHIFT_RIGHT     reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    OUTPUT          reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    INPUT           reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    OPEN_LOOP       reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    $end            reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)
    CLOSE_LOOP      reduce using rule 10 (loop -> OPEN_LOOP commands CLOSE_LOOP .)

